generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id                  String     @id @default(uuid())
  name                String
  imageUrl            String
  deliveryTimeMinutes Int
  deliveryFee         Decimal    @db.Decimal(10, 2)
  products            Product[]
  categories          Category[] @relation("CategoryToRestaurant")
  orders              Order[]
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageUrl    String
  products    Product[]
  restaurants Restaurant[] @relation("CategoryToRestaurant")
}

model Product {
  id                 String     @id @default(uuid())
  name               String
  description        String
  imageUrl           String
  price              Decimal    @db.Decimal(10, 2)
  restaurantId       String
  categoryId         String
  discountPercentage Int        @default(0)
  createdAt          DateTime   @default(now())
  category           Category   @relation(fields: [categoryId], references: [id])
  restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
  orders             Order[]
}

model Order {
  id                  String      @id @default(uuid())
  userId              String
  restaurantId        String
  deliveryFee         Decimal     @db.Decimal(10, 2)
  totalPrice          Decimal     @db.Decimal(10, 2)
  totalDiscounts      Decimal     @db.Decimal(10, 2)
  status              OrderStatus
  createdAt           DateTime    @default(now())
  subtotalPrice       Decimal     @db.Decimal(10, 2)
  deliveryTimeMinutes Int
  restaurant          Restaurant  @relation(fields: [restaurantId], references: [id])
  user                User        @relation(fields: [userId], references: [id])
  products            Product[]
}

enum OrderStatus {
  CONFIRMED
  CANCELED
  PREPARING
  DELIVERING
  COMPLETED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
